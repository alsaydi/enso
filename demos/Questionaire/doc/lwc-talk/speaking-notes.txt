/**********************************************************
This presentation incrementally builds up the full QL DSL
and introduces the various components like binding and 
styling.
You can find the files for the various sections in this 
tarball. Either copy-paste the files or type in the diffs.

Important files:
- housing.ql (note name change)
- ql.schema
- ql.grammar
- ql.stencil
- "run-web.sh" once to start web server (note name change)
- "ruby parseToJSON.rb" after each new set of files to 
  regenerate JSON

*** = section separator
// = notes
<...> = take this action
"..."  = say this -- somewhat important
otherwise = say something 
**********************************************************/

*** Introduction ***
//intro basic structure of enso 
<run slides 1 to ..>
<slide 1, the big circle slide>

<slide 2, some accolades>
Today I will be demonstrating Enso using the challenge
problem of LWC.
- external, (mostly) textual, DSL workbench
- implemented as a Ruby library
  - research project at University of Texas at Austin
- built on top of itself
  - enso is a (suite of) enso DSLs
  - graphical and textual editors, model interpreters

<slide 3, three arrows pouring into the cauldron>



*** Basic QL (01) ***
//only questions and title
<copy files from 01-basic dir>

<show housing.ql>
"We start off with a basic QL language that only has a 
title and a list of questions. In order to define this
simple DSL, we need two things: a ql.schema and a 
ql.grammar"

<show ql.schema>
"Metamodels for Enso are written using the Schema DSL."
Classes = sets of fields
Fields = name-type pairs
- Cardinality using standard notation *, ?
- ! indicates a strong composition relationship (black
  diamond in UML)

<show ql.grammar>
Uses EBNF
- Terminal and non-terminal production rules
- Object creation tag [...] / field bindings
- Parses a text file into a model conforming to a schema

<show ql.stencil>
"Stencil is an ostensibly imperative language for 
specifying GUIs. Since a questionaire is essentially a 
projection from model to an interface, all the logic 
for this challenge is contained within this file."
- Mixture of imperative control flow structures like For 
  loops and If branches
- With UI widgets like Text and alignment containers
  (ie vertical)

<run run-web.sh>
<run parseToJSON>
<clear browser cache>
<launch web browser to localhost:8000/js/stencil.htm>
<preferably chrome>



*** Styling (02) ***
//Add styling and explain imports to structure code
"This is an extremely ugly questionaire, so let's doll
it up a little"
<open ql.stencil>
Styling can be added to widgets as CSS-like properties
<copy-paste ql.stencil from 02-styling>
"I'm going to add a background, together with separate parts
for the title and body"

<run parseToJSON>
<clear browser cache>
<launch web browser to localhost:8000/js/stencil.htm>

"Now things are starting to look unwieldy. Thankfully, 
because everything is a DSL we get to use the usual techniques
for modularity and abstraction to help us."

<copy layout.stencil and open it>
"Here we extract the styling into a function. This produces
background-title-body layout we saw just now from inputs."

<copy ql2.stencil to ql.stencil>
"And in the main ql.stencil, we import the styling function
and call it. We can also make the colors parameters if we 
want."

<re-run, but optional>

<copy ql.stencil from 02>
"For the rest of the presentation we will revert to the 
original because I don't want to work with two files."



*** Answers (03) ***
//Add answertypes and explain data bindings
"We have questions and obviously we need answers. In this
solution we specify answer types separately from the questions
so they can be shared."

<copy in ql.schema and open>



*** Conclusion ***
<slide n>
- low sloc count! 
  - 84 lines total for dsl including logic
  - 14 lines for instance
  - 0 lines of 4gl code
  simplification whenever possible
- no tooling lock-in -- everything is text editable
  implementation is a single Ruby library
  "This may not be an advantage to everyone here, only the
  ones who are out to lose money"
- Everything is a language
  common concepts like modularity and reuse are ubiquitous


