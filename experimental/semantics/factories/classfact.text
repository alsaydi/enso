

Extensible Interpreters using Class Factory Composition
======================================================


In the Object-Algebra approach AST trees are loaded into different "interpreter"
trees to provide different functionalities for the same language. 

In Ruby such an interpreter factory could like this:

    class Eval
       def Add(l, r)
         AddEval.new(l, r)
       end
       
       def Const(v)
         ConstEval.new(v)
       end
    end
    
For every class there is a method that produces the object with the
desired functionality. The arguments (e.g. l and r) are assumed have
been already instantiated in this way.

    class Expr; end

    class Add < Expr
       attr_reader :l, :r
       def initialize(l, r)
         @l = l
	 @r = r
       end
    end

    class Const < Expr
      attr_reader :v
      def initialize(v)
        @v = v
      end
    end
    
A simple loader (for this kind of expressions) could be implemented as
follows:

    class LoadExp
       def initialize(fact)
         @fact = fact
       end

       def load(obj)
         send(obj.class.name, obj)
       end
       
       def Add(obj)
         @fact.send(:Add, load(obj.l), load(obj.r))
       end
       
       def Const(obj)
         @fact.send(:Const, obj.v)
       end
    end
    
To create an expression for 1 + 2:

    exp = Add.new(Const.new(1), Const.new(2))
    
To interpret

    eval = LoadExp.new(Eval.new).load(exp)
    puts eval.eval # --> 3
    
    
The class Eval requires separate class Add and Const that have the
eval function. In Ruby, this indirection is not needed, since we could
directly lookup the required classes.

    module Eval
      class Expr; end
      
      class Add < Expr
        attr_reader :l, :r
	def eval
	  l.eval + r.eval
	end
      end
      
      class Const < Expr
        attr_reader :value
	def eval
	  value
	end
      end
    end
    
In this case the loader gets module Eval in it constructor. It should
be modified to use const\_get to obtain the required class, and
instance\_variable_set to set the fields directly.

However, this is not very extensible. What if we would like to
instrument eval calls with tracing code? We could write a new module
TraceEval (similar to Eval) that implements this functionality. But
this would require enumeration of all classes in the language. What we
need is that the tracing classes are subclasses of the Add and Const
classes respectively, so that the tracing "eval" methods can call
super to call the original eval (Eval). At the same time, we don't
want to enumerate all (concrete) expression classes, but specify the
extension at the level of Expr.

In plain Ruby, this is not possible, since the inheritance links
between classes are statically determined. Class factories make these
inheritance chains completely dynamic and, hence, configurable.

A class factory is similar to an interpreter factory such as Eval,
only instead it returns *classes* instead of objects. The
corresponding evaluation class factory would look like the following:

    class Eval < Factory
      def Expr(sup)
         sup
      end
      
      def Add(sup)
        Class.new(Expr(sup)) do 
          def eval
	    l.eval + r.eval
	  end
        end
      end
      
      def Const(Expr(sup))
        Class.new(sup) do
          def eval
	    value
	  end
	end
      end
    end

Again there is a method for each (concrete) AST class. They all have a
single parameter, which represents the super class to be. The methods
return new, anonymous classes that capture the desired functionality
for the AST class in question.

The super classs Factory implements the class lookup semantics. It
contains a single methods:

    def lookup(cls, sup)
      if cls == Object then
        sup
      elsif respond_to?(cls)
        send(cls.name, lookup(cls.superclass, sup))
      else
        lookup(cls.superclass, sup)
      end
    end

The lookup function tries to create the appropriate behavior class for
the AST class cls and its dynamic superclass. Note that, if the
current factory does not provide for the class cls (else), we use the
class's superclass for instantiation. This allows a factory to specify
a single behavior for multiple types by declaring a method for a
common super class (e.g. Expr).
  
A simplified loader for such class factories could be implemented like
this:

    class LoadExp
       def initialize(fact)
         @fact = fact
       end

       def load(obj)
         send(obj.class.name, obj)
       end

       def load_class(cls)
         @fact.lookup(cls, cls)
       end
       
       def Add(obj)
         load_class(obj.class).new(load(obj.l), load(obj.r))
       end
       
       def Const(obj)
         load_class(obj.class).new(obj.v)
       end
    end
    
This loader sets up a completely new inheritance chain for each AST
node. The chain stops at the original AST class itself; so all
interpreter classes will be subclasses of the corresponding AST
class. As a result, attr\_readers and initialize methods are not
needed in the class factory; they are inherited. Now wel still only
have basic interpretation. How to extend with tracing?

Class factories can be composed using class factory combinators. The
most important one is Extend, which is defined as follows.

    class Extend
      def initialize(a, b)
        @a = a
	@b = b
      end
      
      def lookup(cls, sup)
        @a.lookup(cls, @b.lookup(cls, sup))
      end
    end

Next we specify generic tracing behavior in a separate class factory.

    class Trace
      def Expr(sup)
        Class.new(sup) do
	  def eval
	    puts "Entering"
	    x = super
	    puts "Exiting"
	    return x
	  end
	end
      end
    end


Using Extend, it is no possible to generically add tracing behavior to
interpreters:

    traceEval = Extend.new(Trace.new, Eval.new)
    exp2 = LoadExp.new(traceEval).load(exp)
    exp2.eval
	
