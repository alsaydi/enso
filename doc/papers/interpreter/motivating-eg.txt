Motivating example: Web development framework

<%
EnsoWeb is good example because:
- multiple DSL environment
  - heavy reuse, eg expressions
    - avoid code duplication and replicated maintainence
    - integration concerns, ie my expression is the same as yours
  - modular feature composition (this is a *very* dangerous buzzword combination!)
    - eg secure, db, secure+db, etc
  - crosscutting features, eg security
  - tooling (we don't really have this yet)
- 'real' application --- (how many klocs? <-- is this even a good gauge?)

Goals:
- Build a set of interpreters that:
  - accommodate pervasive interactions between DSLs
  - robust under evolution
    - you can change, add or remove individual pieces

Current:
- Model level composition
  - 
%>

EnsoWeb is a web development framework created using Enso following the standard Model-View-Controller architecture. It comprises a number of DSLs for defining data models, web interfaces, security policies, and database schemas. These DSLs share common language components, such as expressions, which should be reused. DSLs can have dependencies on each other, for example all of the other DSLs depend on the data model. Others can  have semantic operations that interact with each other in crosscutting and possibly intricate ways. For instance, security policies limit the data the web interface can access, and the web interface determines database prefetching strategies. There is also the issue of modularity: we want to be able to enable any combination of optional features like security and database pre-fetching with a linear amount of source code changes. These concerns in EnsoWeb are fairly typical of a DSL-based framework with multiple languages and commercial systems, like Microsoft's Oslo system, may boast even more DSLs.

Our goal is to build a set of interpreters for these DSLs that accomodate close interaction between DSLs, yet remains robust under evolution and allows individual components to be removable modularly.



