
Delta(schema) = 
--------------
$for(primitives) {
  class ["DSingle"+name] end
  class ["Clear"+name] < ["DSingle"+name] end
  class ["Set"+name] < ["DSingle"+name] 
    value: [name] 
  end
}

$for(classes) {
   class ["DSingle"+name] end
   class ["Clear"+name] < ["DSingle"+name] end
   class ["Delta"+name] < ["DSingle"+name], [supers: ["Delta"+name]]
     $for(defined_fields) {
       [name]: [case 
         when f.traversal && !f.many then "DSingle"+type.name
         when f.traversal && f.many then "DMany"+type.name
         when !f.traversal && !f.many then "RefSingle"
         when !f.traversal && f.many then "RefMany"+(type.key ? type.key.type : "int")]
       [run optional=true; many=many]
     }
   end
   class ["DMany"+name]
      position: [if key then key.type.name else "int"]
   end
   class ["Delete"+name] < ["DMany"+name] end
   class ["Insert"+name] < ["DMany"+name], ["Delta"+name] end
   class ["Modify"+name] < ["DMany"+name], ["Delta"+name] end
}

   class Ref
      position: str
   end
   class RefSingle end
   class ClearRef < SingleRef end
   class SetRef < SingleRef, Ref end

$for(primitives) {
   class ["RefMany"+name]  -- for each primitive key type P
      position: "+name]
   end
   class ["DeleteRef"+name] < ["RefMany"+name] end
   class ["InsertRef"+name] < ["RefMany"+name], Ref end
   class ["ModifyRef"+name] < ["RefMany"+name], Ref end
}
--------------
