<!DOCTYPE html>
<html>
    <head>
        <title>My Sample Project</title>
        <!-- data-main attribute tells require.js to load
             scripts/main.js after require.js loads. -->
        <script src="jquery.js"></script>
        <script src="require.js"></script>
     <script>
requirejs([
  "enso",
'core/system/load/load',
'core/diagram/code/construct',
'core/diagram/code/render'
],
function(Enso, Load, Construct, Render) {
// jquery
data_file = "income.ql"
stencil_file = S("ql.stencil")

stencil = Load.load(stencil_file)
data = Load.load(data_file)
params = new EnsoHash({ data:  data })
diagram = Construct.eval(stencil, params)

function getMethods(obj) {
  var result = [];
  for (var id in obj) {
    try {
      if (typeof(obj[id]) == "function") {
        result.push(id + ": " + obj[id].toString());
      }
    } catch (err) {
      result.push(id + ": inaccessible");
    }
  }
  return result;
}

var interp = {
  render: function(obj) {
    var self = this; 
	type = obj.schema_class();
    method = S("render", "_", type.name()).to_s();
    dom = this[method](obj);
    return dom;
  },
  render_Stencil: function (obj) {
  	return this.render(obj.body())
  },
  render_Container: function (obj) {
  	var dom;
  	if (obj.direction()==1) { //vertical
       dom = $('<table>');
	    for (var i=0,len=obj.items().size(); i<len; i++)
	    {
	    	var t = this.render(obj.items()._get(i));
	    	var row = $('<tr border="1">');
	    	row.append(t);
	    	dom.append(row);
	  	} 
  	} else if (obj.direction()==2) { //horizontal
        dom = $('<table>');
	    var row = $('<tr border="1">');
	    var grid = false;
	    if (this.in_grid > 0) {
	    	grid = true;
	    }
	    for (var i=0,len=obj.items().size(); i<len; i++)
	    {
	    	var t = this.render(obj.items()._get(i));
	    	var col = $('<td>');
	    	col.append(t);
	    	row.append(col);
	  	} 
	    dom.append(row);
	    if (grid) {
	    	dom = row;
	    }
  	} else if (obj.direction()==3) { //grid
		dom2 = $('<table cellpadding="10" height="100%">');
		this.in_grid += 1;
		for (var i=0,len=obj.items().size(); i<len; i++)
	    {
	    	dom2.append(row);
	    	var row = this.render(obj.items()._get(i));
	  	}
		this.in_grid -= 1;
		dom = $('<div height="100%">');
		dom.append(dom2);
  	} else if (obj.direction()==4) { //graph
  	} else if (obj.direction()==5) { //style, group
  		dom = $('<div>')
	    for (var i=0,len=obj.items().size(); i<len; i++)
	    {
	    	var t = this.render(obj.items()._get(i));
	    	dom.append(t);
	    }
  	}
  	this.make_style(dom, obj.props());
  	return dom;
  },
  render_Pages: function (obj) {
  	var index = obj.current().val();
  	var dom = this.render(obj.items()._get(index));
    return dom;
  },
  render_Space: function (obj) {
  	var txt3 = $("<div>");
  	return txt3;
  },
  render_Text: function (obj) {
  	var dom = $('<text>');
  	dom.text(obj.string().val().to_s());
  	this.make_style(dom, obj.props());
    return dom;
  },
  render_TextBox: function (obj) {
  	var dom = $("<input type='text'>");
  	this.make_style(dom, obj.props());
  	dom.keyup(function () {
		var value = parseInt($(this).val());
		if (value) {
			if (obj.value()._get('val')!=value) {
				obj.value()._set('val', value);
			}
		}
	}).keyup();
  	dom.val(obj.value().val().to_s()); 
    return dom;
  },
  render_CheckBox: function (obj) {
  	var dom = $('<form>');
  	this.make_style(dom, obj.props());
  	var arrange = obj.props._get("arrange");
  	if (arrange!='vertical' && arrange!='horizontal') {
  		//guess how to arrange
  		var too_long = false;
  		obj.choices().each(function(c) {
  			if (c.val().length > 20) too_long=true;
  		});
  		if (too_long) arrange='vertical';
  	}
    for (var i=0,len=obj.choices().size(); i<len; i++)
    {
    	var choice = obj.choices()._get(i);
    	var line = S("<input type='checkbox' name='", obj._id().toString(),"'>", choice.val(), "</input>");
    	if (arrange=='vertical') {
    		line = line + "<br>";
    	}
        dom.append($(line));
    }
    return dom;
  },
  render_RadioList: function (obj) {
  	var dom = $('<form>');
  	this.make_style(dom, obj.props());
  	var arrange = obj.props._get("arrange");
  	if (arrange!='vertical' && arrange!='horizontal') {
  		//guess how to arrange
  		var too_long = false;
  		obj.choices().each(function(c) {
  			if (c.val().length > 20) too_long=true;
  		});
  		if (too_long) arrange='vertical';
  	}
    for (var i=0,len=obj.choices().size(); i<len; i++)
    {
    	var choice = obj.choices()._get(i);
    	var line = S("<input type='radio' name='", obj._id().toString(),"'>", choice.val(), "</input>");
    	if (arrange=='vertical') {
    		line = line + "<br>";
    	}
        dom.append($(line));
    }
    return dom;
  },
  coercetostr: function () { },
  coercefromstr: function () { },
  make_style: function (dom, props) {
  	props.each(function(prop) {
  		console.log(S("css prop:", prop.var().to_s(), " -> ", prop.val().val().to_s()));
      dom.css(prop.var().to_s(), prop.val().val().to_s());
    });
  },
  in_grid: []
}
   data = interp.render(diagram)
   $("body").append(data);
}
)
</script>
        <style>
            html {height: 100%;}
            body {height: 100%; margin: 0; padding: 0;}
        </style>
    </head>
    <body>
</html>
