

//require('jsclass')
//JS.require('JS.Set')

with (global) {

  fs = require("fs");
  
  
  makeProxy = function(obj) {
    var proxy = null;
    var handler = {
      get : function (proxy, prop) {
         var x = obj[prop];
        if (x) {
         return x;
        } else {
         return function() { return obj.GET(prop); }
        }
      },
      set : function(proxy, name, val) {
        return obj.set(name, val);
      },
      keys : function() {
        return handler.GET("keys");
      }};
    proxy = Proxy.create(handler);
    return proxy;
  }

  makeArrayProxy = function(obj) {
    var proxy = null;
    var handler = {
      get : function (proxy, prop) {
         var x = obj[prop];
         return x ? x : obj.GET(prop);
      },
      set : function(proxy, name, val) {
        return obj.set(name, val);
      },
      keys : function() {
        return obj.keys;
      }};
    proxy = Proxy.create(handler);
    return proxy;
  }

  /*
  ProxyMixin = function(klass) {
    return function() {
      this.AT$ = {};
      return ProxyWrapper(klass.apply(this, arguments));
    }}
  */
  
  str = function() {
   return  Array.prototype.slice.call(arguments).join("");
    }
    
  puts = function(obj) {
    console.log("" + obj);
  }
  
  EnsoHash = function(init) {
    var data = new Object();
    this.has_key = function(key) { return data.hasOwnProperty(key); }
    this.GET = function(key) { return data[key]; }
  }
  
  System = {
    readJSON: function(path) {
      return JSON.parse(fs.readFileSync(path));
    }
  }
  
  closure = function(obj, fun) {
    return function () { 
       return fun.apply(obj, arguments);
     }
  }
  
  Object.prototype.has_key = Object.prototype.hasOwnProperty
  Array.prototype.each = Array.prototype.forEach

  Object.prototype.find = function(pred) { for (i in this) if (pred(a = this[i])) return a; }
  Object.prototype.is_a = function(type) { return this instanceof type; }
  Object.prototype.define_singleton_value = function(name, val) { this[name] = function() { return val;} }
  Object.prototype.define_singleton_method = function(name, val) { this[name] = val }
  String.prototype.to_s = function() { return this }
  Object.prototype.to_s = function() { return "" + this }
  raise = function(msg) { throw msg }
  Object.prototype.GET = function(k) { return this[k] }

  EnsoObject = { new: function() { return {} } };
  
  MakeClass = function(base, proto) {
      if (!proto) {
        proto = base;
        base = EnsoObject;
      }
      if (typeof base === "function") {
        base = { new: base };
      }
      var parent_proto = base.new.prototype;
      proto.__proto__ = parent_proto;
      proto._class_ = proto._class_ || {};
      proto._class_.__proto__ = base;
      proto.initialize = proto.initialize || function() {
          if (parent_proto.hasOwnProperty("initialize")) {
              parent_proto.initialize.apply(this, arguments);
          }
      };
      
      var constructor = function() {
         var obj = Object.create(proto);
         obj.AT$ = {};
         proto.initialize.apply(obj, arguments);
         return obj;
      }
      constructor.prototype = proto;
      proto._class_.new = constructor;
      return proto._class_;
  }


}
