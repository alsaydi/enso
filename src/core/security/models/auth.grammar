start Auth

Auth ::= [Authentication] rules:Rule*

Rule ::= AllowRule | DenyRule
AllowRule ::= [AllowRule] Strength? "allow" action:Action ("if" cond:Expr)?
DenyRule  ::= [DenyRule]  Strength? "deny" Msg? action:Action ("if" cond:Expr)?
Msg ::= msg:str

Strength ::= "weak"     @"@strength=1"
           | "medium"   @"@strength=2"
           | "strong"   @"@strength=3"

Action ::= [Action] op:{Operation ","}+ "(" obj:sym ":" type:sym ("{" ("*" @"@allfields=true" | fields:{Field ","}+) "}")? ")"
Operation ::= OpCreate | OpRead | OpUpdate | OpDelete
OpCreate ::= [OpCreate] "create"
OpRead   ::= [OpRead]   "read"
OpUpdate ::= [OpUpdate] "update"
OpDelete ::= [OpDelete] "delete"
Field ::= [Field] name:sym

Expr ::= EOr
EOr ::= [EBinOp] e1:EAnd "or" e2:EOr @"@op = 'or'"
       | EAnd
EAnd ::= [EBinOp] e1:EBinOp "and" e2:EAnd @"@op = 'and'"
        | EBinOp
EBinOp ::= [EBinOp] e1:EUnOp (op:"=="|op:"!="|op:">"|op:"<"|op:">="|op:"<=") e2:EBinOp
         | EUnOp
EUnOp ::= [EUnOp] op:"not" e:Expr
        | [EFunCall] fun:sym "(" args:{Expr ","}* ")"
        | EListComp
        | EConst
        | Primary
        | "(" Expr ")"
Primary ::= [EField] e:Primary "->" fname:sym
          | [EVar] name:sym
EListComp ::= [EListComp] (op:"all?" | op:"any?") var:sym "in" list:Expr ":" e:Expr
EConst ::= EStrConst | EIntConst | EBoolConst
EStrConst ::= [EStrConst] val:str
EIntConst ::= [EIntConst] val:int
EBoolConst ::= [EBoolConst] "true" @"@val=true" | [EBoolConst] "false" @"@val=false"
