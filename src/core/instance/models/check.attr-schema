
class Report
  errors: Error*
end

class Error
  message: str
  !origin: Location
end

class Instances
  @check(s): Error* = Report {errors: instances.check(s)}
end

class Instance
  @check(s): Error* =   if c <- s.types[type] then 
                           check_type(c)
                        else
                           Error {message: "Undefined type #{type}"; 
                                  origin: origin }
                        end

  @check_type(t): Error* =      if c <- type.all_subclasses, c.name = t.name then
				  contents.check(c);
				  for f <- c.fields, !f.optional do
 				     check_presence(f)
 				  end
                                else
                                  Error {message: "Expected #{t.name}";
			                 origin: origin}
                                end
                              end

  @check_presence(f): Error* = unless Field c <- contents, f.name = c.name then
          	       	      	  Error {message: "Missing field #{f.name}";
				         origin: origin}
                               end
end

class Field
  @check(c): Error* =   if f <- c.fields[name] then
 			  values.check_type(f.type);
                          if !f.many && values.length > 1 then
                             Error {message: "Field is not many";
			     	    origin: origin}
                          end;
                          if !f.optional && values.length == 0 then
                             Error {message: "Field is not optional";
			     	    origin: origin}
                          end
                          if f.computed then
                             Error {message: "Field is computed";
                                    origin: origin}
                          end
 			else
                           Error {message: "Undefined field";
			     	  origin: origin}                          
			end
		      end
end
 

class Prim
  @check_type(t): Error* = if t.name != kind then
                             Error {message: "Expected #{t.name}",
			            origin: origin}
                           end
end

class Ref
  @check_type(t): Error* = if t.name != type then
                             Error {message: "Expected #{t.name}",
			            origin: origin}
                           end
end 
            