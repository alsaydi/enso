require 'core/semantics/code/interpreter'
require 'core/expr/code/lvalue'

module Invert
  module GetSourcesExpr
    include Interpreter::Dispatcher

    def getSources(obj)
      dispatch_obj(:getSources, obj)
    end
  
    def getSources_ETernOp(obj)
      res = []
      res = res.concat(getSources(obj.e1))  #res=res.concat instead of just res.concat for JS [JS HACK]
      res = res.concat(getSources(obj.e2))
      res = res.concat(getSources(obj.e3))
      res
    end
  
    def getSources_EBinOp(obj)
      res = []
      res = res.concat(getSources(obj.e1))
      res = res.concat(getSources(obj.e2))
      res
    end

    def getSources_EUnOp(obj)
      getSources(obj.e)
    end
  
    def getSources_EVar(obj)
      [obj]
    end

    def getSources_EConst(obj)
      []
    end

    def getSources_EField(obj)
      [obj]
    end
  end

  module InvertExpr
    include Interpreter::Dispatcher

    def invert(obj)
      dispatch_obj(:invert, obj)
    end
  
    def invert_EBinOp(obj)
      val = @D[:val]
      case obj.op
      when "+"
        if obj.e1.EConst?
          dynamic_bind(val: val - obj.e1.val) { invert(obj.e2) }
        elsif obj.e2.EConst?
          dynamic_bind(val: val - obj.e2.val) { invert(obj.e1) }
        end
      else
        raise "Unknown operator (#{obj.op})"
      end
    end
  
    def invert_EVar(obj)
      val = @D[:val]
      addr = Lvalue.lvalue(obj, env: @D[:env])
      addr.set(val)
    end

    def invert_EConst(obj)
      raise "Invert fail at constant" if @D[:val]!=obj.val
    end

    def invert_EField(obj)
      val = @D[:val]
      addr = Lvalue.lvalue(obj, env: @D[:env])
      addr.set(val)
    end
  end

  class InvertExprC
    include InvertExpr
    include GetSourcesExpr
    def initialize; end
  end

  def self.invert(obj, args=Hash.new)
    interp = InvertExprC.new
    interp.dynamic_bind(args) do
      interp.invert(obj)
    end
  end

  def self.getSources(obj, args=Hash.new)
    interp = InvertExprC.new
    interp.dynamic_bind(args) do
      interp.getSources(obj)
    end
  end

end
