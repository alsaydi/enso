start Program

Program ::= [Module] defs:Top* @/
Top     ::=  Require | MainModule
Require ::= [Directive] action:"require" what:Expr
MainModule ::= [Module] /2 "module" name:sym /> defs:Def* @/2 / meta:Meta* @/2 </"end"
Def     ::= "@" Binding | Class | Module

Module  ::= [Module] "module" name:sym Body
Class   ::= [Class] "class" name:sym ("<" parent:sym)? Body
Body    ::= /> meta:Meta* @/ / defs:Instance* @/ </"end"/
Meta    ::= "def" "self" .".". Method | "@@". Binding
Instance ::= Require | Directive | "def" Method | "@" Binding
Method  ::= [Binding] (name:sym | name:"[]" | name:"[]=") value:Fun
Binding ::= [Binding] name:sym "=" value:Expr
Directive ::= [Directive] (action:"attr_reader" | action:"attr_writer" | action:"attr_accessor" | action:"include") what:Expr

Fun     ::= [Fun] (."(".Params.")")? /> ("local" locals:Decl+ @"," /)? body:SeqA </ "end"
Params  ::= args:Arg+ @(.",") (."," "*".rest:sym)? (."," "&".block:sym)?
          | "*".rest:sym (."," "&".block:sym)?
          | "&".block:sym
Arg     ::= [Decl] name:sym ("=" default:Expr)?
Decl     ::= [Decl] ":".name:sym

Seq      ::= /> SeqA </
SeqA     ::= [Seq] statements:Statement* @/ | Statement | Block
Statement ::= Stat | Expr .";"
Stat      ::= If | While | BlockCall | Rescue | Assign
BlockCall ::= [Call] Call block:Block

While   ::= [While] "while" cond:Expr "do" body:Seq "end"
Assign  ::= [Assign] to:Primary AssignOp from:EB
AssignOp ::= op:"=" | op:"+=" | op:"-=" | op:"||=" | op:"&&="


Rescue  ::= [Rescue] "begin" base:Seq rescues:Handler* ("ensure" ensure:Seq)? "end"
Handler ::= [Handler] "rescue" ("(". kind:str var:str .")")? body:Seq

EB      ::= Statement | Block
Block   ::= "do" BlockFun
BlockFun     ::= [Fun] ("|".Params."|")? body:Seq "end"

Expr ::= EOr
EOr ::= [EBinOp] e1:EAnd op:"||" e2:EOr
       | EAnd
EAnd ::= [EBinOp] e1:EBinOp1 op:"&&" e2:EAnd
        | EBinOp1
EBinOp1 ::= [EBinOp] e1:EBinOp2 (op:"==" | op:"!=") e2:EBinOp1
         | EBinOp2
EBinOp2 ::= [EBinOp] e1:EBinOp3 (op:">" | op:"<" | op:">=" | op:"<=") e2:EBinOp2
         | EBinOp3
EBinOp3 ::= [EBinOp] e1:EBinOp3 (op:"<<" | op:">>" | op:"++") e2:EBinOp4
         | EBinOp4
EBinOp4 ::= [EBinOp] e1:EBinOp5 (op:"+" | op:"-") e2:EBinOp4
         | EBinOp5
EBinOp5 ::= [EBinOp] e1:EUnOp (op:"*" | op:"/" | op:"%") e2:EBinOp5
         | EUnOp
EUnOp ::= [EUnOp] (op:"!" | op:"-") e:EUnOp
        | EBinOp6
EBinOp6 ::= [EBinOp] e1:Primary op:"**" e2:EBinOp6
         | Primary

If      ::= [If] "if" IfBody "end"
IfBody  ::= cond:Expr "then" sthen:Seq IfTail?
IfTail  ::= selse:ElseIf | "else" selse:Seq
ElseIf  ::= [If] "elsif" IfBody

Primary ::= InstVar | ClassVar | Self | Var | If | Index | List | Record | ECall | Lit | "(". (Expr | Seq) .")"
Self    ::= [Var] name:"self"
Var     ::= [Var] name:sym
InstVar ::= [Var] kind:"@". name:sym
ClassVar::= [Var] kind:"@@". name:sym
Index   ::= [Index] base:Primary ."[". index:Expr ."]"
List    ::= [List] "[". items:Expr* @(.",") ."]"
Record  ::= [Record] "{". fields:Field* @(.",") ."}"
  Field   ::= [Binding] name:sym .":" value:Expr
Lit     ::= [Lit] value:(str | int | real)
ECall   ::= [Call] target:Super "super" (ParenArgs | "(".")")
          | [Call] ({block==nil} | block:IsVar) Call
  IsVar ::= [Var] 
  Super ::= [Super]
Call    ::= Target? method:sym ParenArgs?
  ParenArgs ::= ."(".Args.")"
  Target  ::= target:Primary .".".
  Args    ::= args:Expr+ @(.",") (."," "*".rest:Expr)? (."," "&".block:Var)?
           | "*".rest:Expr (."," "&".block:Var)? 
           | "&".block:Var 
         