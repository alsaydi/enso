start Program

Program ::= [Module] "def str(*args); args.join; end" defs:Def* " __main__"

// class N < N 
//   D* 
// end
// class 
// D ::= def N 

Def     ::= Class | Method | Module | Directive
Directive ::= [Directive] action:("require" | "include" | "attr_reader" | "attr_writer" | "attr_accessor") what:Expr
Module  ::= [Module] "module" name:sym meta:MetaDef* defs:Def* "end"
Class   ::= [Class] "class" name:sym ("<" parent:sym)? meta:MetaDef* defs:Def* "end" /
MetaDef ::= [Binding] "def self.". name:sym value:Fun
Method  ::= [Binding] ("def" name:sym value:Fun | name:sym "=" value:Expr)
Fun     ::= [Fun] Params? / body:Seq "end" /
Params  ::= ."(". args:Arg+ @(.",") (."," "&". block:sym)? .")"
          | ."(". "&". block:sym .")"
Arg     ::= [Arg] name:sym ("=" default:Expr)?

Seq     ::= [Seq] statements:Statement* | Statement | Block

Statement ::= Stat | Expr .";"
Stat      ::= If | While | BlockCall | Rescue | Assign
BlockCall ::= [Call] Call block:Block

While   ::= [While] "while" cond:Expr "do" body:Seq "end" /
Assign  ::= [Assign] to:Primary "=" from:EB

Rescue  ::= [Rescue] "begin" base:Seq rescues:Handler* ("ensure" ensure:Seq)? "end" 
Handler ::= [Handler] "rescue" "(" kind:str var:str ")" body:Seq

EB      ::= Statement | Block
Block   ::= "do" BlockFun
BlockFun     ::= [Fun] BarParams? / body:Seq "end" /
BarParams  ::= ."|". args:Arg+ @"," ."|"

Expr ::= EOr
EOr ::= [EBinOp] e1:EAnd op:"||" e2:EOr
       | EAnd
EAnd ::= [EBinOp] e1:EBinOp1 op:"&&" e2:EAnd
        | EBinOp1
EBinOp1 ::= [EBinOp] e1:EBinOp2 (op:"==" | op:"!=") e2:EBinOp1
         | EBinOp2
EBinOp2 ::= [EBinOp] e1:EBinOp3 (op:">" | op:"<" | op:">=" | op:"<=") e2:EBinOp2
         | EBinOp3
EBinOp3 ::= [EBinOp] e1:EBinOp3 (op:"<<" | op:">>" | op:"++") e2:EBinOp4
         | EBinOp4
EBinOp4 ::= [EBinOp] e1:EBinOp5 (op:"+" | op:"-") e2:EBinOp4
         | EBinOp5
EBinOp5 ::= [EBinOp] e1:EUnOp (op:"*" | op:"/" | op:"%") e2:EBinOp5
         | EUnOp
EUnOp ::= [EUnOp] (op:"!" | op:"-") e:EUnOp
        | EBinOp6
EBinOp6 ::= [EBinOp] e1:Primary op:"**" e2:EBinOp6
         | Primary

If      ::= [If] "if" IfBody / "end"
IfBody  ::= cond:Expr "then" / sthen:Seq IfTail?
IfTail  ::= selse:ElseIf | / "else" / selse:Seq
ElseIf  ::= [If] / "elsif" IfBody

Primary ::= InstVar | ClassVar | Var | If | Index | List | Record | ECall | Lit | "(". (Expr | Seq) .")"
Var     ::= [Var] name:sym
InstVar ::= [Var] kind:"@". name:sym
ClassVar::= [Var] kind:"@@". name:sym
Index   ::= [Index] base:Primary ."[". index:Expr ."]"
List    ::= [List] "[". items:Expr* @(.",") ."]"
Record  ::= [Record] "{". fields:Field* @(.",") ."}"
  Field   ::= [Binding] name:sym .":" value:Expr
Lit     ::= [Lit] value:(str | int | real)
ECall   ::= [Call] Call { block == nil }
Call    ::= Target? name:sym Args?
  Target  ::= target:Primary .".".
  Args    ::= ."(" args:Expr+ @(.",") ")"
