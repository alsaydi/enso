
class Def
  name#   str?

class Require < Def

class Module < Def
  defs:   Def*

class Class < Module
  parent: str?

class Binding < Def
  value:  Expr

class Expr
  
class EBinOp < Expr
  op: str
  e1! Expr
  e2! Expr

class EUnOp < Expr
  op: str
  e! Expr
    
class Seq < Expr
  statements: Expr*

class Call < Expr
  target: Expr?
  name:   str
  args:   Expr*
  named:  Binding*
  block:  Fun

class Fun < Expr
  args: Arg*
  body: Expr

class Arg
  name: str

class Assign < Expr
  to:   Expr
  from: Expr

class If < Expr
  cond: Expr
  sthen: Expr
  selse: Expr?

class While < Expr
  cond: Expr
  body: Expr

class Var < Expr
  name: str

class Field < Expr 
  name: str

class Index < Expr
  base:   Expr
  index:  Expr
  
class List < Expr
  items:  Expr*

class Record < Expr
  fields: Binding*

class Lit < Expr
  value: atom

primitive atom
primitive str