
class Def

class Directive < Def
  action: str
  what! Expr
  
class Named < Def
  name#   str?

class Module < Named
  meta!   Def*
  defs!   Def*

class Class < Module
  parent: str?

class Binding < Named
  value!  Expr

class Expr
  
class EBinOp < Expr
  op: str
  e1! Expr
  e2! Expr

class EUnOp < Expr
  op: str
  e! Expr
    
class Seq < Expr
  statements! Expr*

class Call < Expr
  target! Expr?
  name:   str
  args!   Expr*
  block!  Fun?

class Fun < Expr
  args! Arg*
  block: str?
  body! Expr

class Arg
  name: str
  default! Expr?

class Assign < Expr
  to!   Expr
  from! Expr

class If < Expr
  cond! Expr
  sthen! Expr
  selse! Expr?

class While < Expr
  cond! Expr
  body! Expr

class Rescue < Expr
  base! Expr
  rescues! Handler*
  ensure! Expr?
 
class Handler
  kind: str?
  var: str?
  body! Expr  

class Var < Expr
  name: str
  kind: str?

class List < Expr
  items!  Expr*

class Record < Expr
  fields! Binding*

class Lit < Expr
  value: atom

primitive atom
primitive str