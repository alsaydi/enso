  start Grammar

  Grammar ::= [Grammar] "start" \start:/rules[it]^ rules:Rule*

  Rule ::= [Rule] name:sym "::=" arg:Alt
         | [Rule] "abstract" name:sym

  Alt ::= [Alt] alts:{Create "|"}+

  Create ::= [Create] "[" name:sym "]" arg:Sequence
    | Sequence

  Sequence ::= [Sequence] elements:Field*

  Field ::= [Field] name:sym ":" arg:Pattern
    | Pattern
  
  Pattern ::= 
      [Value] kind:"int"
    | [Value] kind:"str"
    | [Value] kind:"real"
    | [Value] kind:"sym"
    | [Value] kind:"atom"
    | [Code] "@" code:str
    | [Code] expr:EBlock
    | [Ref] path:Path "^"
    | [Lit] value:str
    | [Call] rule:/rules[it]^
    | [Regular] arg:Pattern "*" @"@optional = true; @many = true; @sep = nil"
    | [Regular] arg:Pattern "?"	@"@optional = true; @sep = nil"
    | [Regular] arg:Pattern "+" @"@many = true; @sep = nil"
    | [Regular] "{" arg:Pattern sep:str "}" "*" @"@optional = true; @many = true"
    | [Regular] "{" arg:Pattern sep:str "}" "+" @"@many = true"
    | "(" Alt ")"

// extension of path.grammar
abstract Path
Key ::= [It] "it"

abstract EBlock
