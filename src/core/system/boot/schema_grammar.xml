<schema.grammar source='core/schema/models/schema.grammar' date='2012-07-04 15:16:20 +0200' checksum='534cee3bd6d118f37751419bc0ffa179ce1ed76f'>
  <depends>
    <impl.grammar source='core/expr/models/impl.grammar' date='2012-07-04 14:06:23 +0200' checksum='022f066b2e0ff741ec0567d3a98cae49895d0f41'/>
  </depends>
  <Grammar>
    <start many='false' keyed='true'>
      /rules[Schema]
    </start>
    <rules many='true' keyed='true'>
      <Rule name='ETernOp'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='ETernOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[ETernOp]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Field name='op1'>
                        <arg many='false' keyed='false'>
                          <Lit value='?'/>
                        </arg>
                      </Field>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EOr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Field name='op2'>
                        <arg many='false' keyed='false'>
                          <Lit value=':'/>
                        </arg>
                      </Field>
                      <Field name='e3'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EOr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EOr]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EOr'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBinOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EOr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='or'/>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EAnd]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Code>
                        <expr many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='op'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EStrConst val='|'/>
                            </e2>
                          </EBinOp>
                        </expr>
                      </Code>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EAnd]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EAnd'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBinOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EAnd]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='and'/>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp1]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Code>
                        <expr many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='op'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EStrConst val='&amp;'/>
                            </e2>
                          </EBinOp>
                        </expr>
                      </Code>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EBinOp1]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EBinOp1'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBinOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp1]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Alt>
                        <alts many='true' keyed='false'>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Lit value='=='/>
                              <Code>
                                <expr many='false' keyed='false'>
                                  <EBinOp op='eql?'>
                                    <e1 many='false' keyed='false'>
                                      <EVar name='op'/>
                                    </e1>
                                    <e2 many='false' keyed='false'>
                                      <EStrConst val='eql?'/>
                                    </e2>
                                  </EBinOp>
                                </expr>
                              </Code>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='!='/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='&gt;'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='&lt;'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='&gt;='/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='&lt;='/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                        </alts>
                      </Alt>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp2]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EBinOp2]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EBinOp2'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBinOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp2]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Alt>
                        <alts many='true' keyed='false'>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='+'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='-'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                        </alts>
                      </Alt>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp3]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EBinOp3]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EBinOp3'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBinOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e1'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBinOp3]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Alt>
                        <alts many='true' keyed='false'>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='*'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='/'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='%'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                        </alts>
                      </Alt>
                      <Field name='e2'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EUnOp]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EUnOp]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Primary'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EConst]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Create name='EField'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Primary]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='.'/>
                      <Field name='fname'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='ESubscript'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='e'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='['/>
                      <Field name='sub'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value=']'/>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='EVar'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EListComp'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EListComp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Alt>
                        <alts many='true' keyed='false'>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='all?'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                          <Sequence>
                            <elements many='true' keyed='false'>
                              <Field name='op'>
                                <arg many='false' keyed='false'>
                                  <Lit value='any?'/>
                                </arg>
                              </Field>
                            </elements>
                          </Sequence>
                        </alts>
                      </Alt>
                      <Field name='var'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                      <Lit value='in'/>
                      <Field name='list'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value=':'/>
                      <Field name='e'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EConst'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EStrConst'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='val'>
                        <arg many='false' keyed='false'>
                          <Value kind='str'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='EIntConst'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='val'>
                        <arg many='false' keyed='false'>
                          <Value kind='int'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='EBoolConst'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='true'/>
                      <Code>
                        <expr many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='val'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst val='true'/>
                            </e2>
                          </EBinOp>
                        </expr>
                      </Code>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='EBoolConst'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='false'/>
                      <Code>
                        <expr many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='val'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst/>
                            </e2>
                          </EBinOp>
                        </expr>
                      </Code>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='ERealConst'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='val'>
                        <arg many='false' keyed='false'>
                          <Value kind='real'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='ENil'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='nil'/>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Command'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EWhile]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EFor]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EIf]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[ESwitch]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EFunCall]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EFunDef]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EAssign]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EImport]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EBlock]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EReturn]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EWhile'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EWhile'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='while'/>
                      <Field name='cond'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Command]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EFor'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EFor'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='for'/>
                      <Field name='var'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                      <Lit value=':'/>
                      <Field name='list'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Command]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EIf'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EIf'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='if'/>
                      <Field name='cond'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Command]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Regular optional='true'>
                        <arg many='false' keyed='false'>
                          <Alt>
                            <alts many='true' keyed='false'>
                              <Sequence>
                                <elements many='true' keyed='false'>
                                  <Lit value='else'/>
                                  <Field name='body2'>
                                    <arg many='false' keyed='false'>
                                      <Call>
                                        <rule many='false' keyed='true'>
                                          /rules[Command]
                                        </rule>
                                      </Call>
                                    </arg>
                                  </Field>
                                </elements>
                              </Sequence>
                            </alts>
                          </Alt>
                        </arg>
                      </Regular>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='ESwitch'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='ESwitch'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='switch'/>
                      <Field name='e'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EFunDef'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EFunDef'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='def'/>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                      <Lit value='('/>
                      <Field name='formals'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Formal]
                                </rule>
                              </Call>
                            </arg>
                            <sep many='false' keyed='false'>
                              <Lit value=','/>
                            </sep>
                          </Regular>
                        </arg>
                      </Field>
                      <Lit value=')'/>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Command]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EAssign'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EAssign'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='var'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='='/>
                      <Field name='val'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EImport'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EImport'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='require'/>
                      <Field name='path'>
                        <arg many='false' keyed='false'>
                          <Value kind='str'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EReturn'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='return'/>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[Expr]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Formal'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='Formal'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EBlock'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBlock'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='{'/>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Command]
                                </rule>
                              </Call>
                            </arg>
                          </Regular>
                        </arg>
                      </Field>
                      <Lit value='}'/>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EBlock_nocurl'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EBlock'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Command]
                                </rule>
                              </Call>
                            </arg>
                          </Regular>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EFunCall'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EFunCall'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='fun'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EUnOp]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='('/>
                      <Field name='params'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Expr]
                                </rule>
                              </Call>
                            </arg>
                            <sep many='false' keyed='false'>
                              <Lit value=','/>
                            </sep>
                          </Regular>
                        </arg>
                      </Field>
                      <Lit value=')'/>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Create name='EFunCall'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='fun'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EUnOp]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='('/>
                      <Field name='params'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Expr]
                                </rule>
                              </Call>
                            </arg>
                            <sep many='false' keyed='false'>
                              <Lit value=','/>
                            </sep>
                          </Regular>
                        </arg>
                      </Field>
                      <Lit value=')'/>
                      <Field name='lambda'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[ELambda]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='ELambda'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='ELambda'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='{'/>
                      <Lit value='|'/>
                      <Field name='formals'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Formal]
                                </rule>
                              </Call>
                            </arg>
                            <sep many='false' keyed='false'>
                              <Lit value=','/>
                            </sep>
                          </Regular>
                        </arg>
                      </Field>
                      <Lit value='|'/>
                      <Field name='body'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[EBlock_nocurl]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Lit value='}'/>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='EUnOp'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='EUnOp'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='not'/>
                      <Field name='e'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Expr]
                            </rule>
                          </Call>
                        </arg>
                      </Field>
                      <Code>
                        <expr many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='op'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EStrConst val='!'/>
                            </e2>
                          </EBinOp>
                        </expr>
                      </Code>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EFunCall]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[EListComp]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[Primary]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='('/>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[Expr]
                    </rule>
                  </Call>
                  <Lit value=')'/>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Schema'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='Schema'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='types'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[TypeDef]
                                </rule>
                              </Call>
                            </arg>
                          </Regular>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='TypeDef'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[Primitive]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[Class]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Primitive'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='Primitive'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='primitive'/>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Class'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='Class'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Lit value='class'/>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                      <Call>
                        <rule many='false' keyed='true'>
                          /rules[ClassAnnot]
                        </rule>
                      </Call>
                      <Field name='defined_fields'>
                        <arg many='false' keyed='false'>
                          <Regular optional='true' many='true'>
                            <arg many='false' keyed='false'>
                              <Call>
                                <rule many='false' keyed='true'>
                                  /rules[Field]
                                </rule>
                              </Call>
                            </arg>
                          </Regular>
                        </arg>
                      </Field>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='ClassAnnot'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Regular optional='true'>
                    <arg many='false' keyed='false'>
                      <Call>
                        <rule many='false' keyed='true'>
                          /rules[Parent]
                        </rule>
                      </Call>
                    </arg>
                  </Regular>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Parent'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='&lt;'/>
                  <Field name='supers'>
                    <arg many='false' keyed='false'>
                      <Regular many='true'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Super]
                            </rule>
                          </Call>
                        </arg>
                        <sep many='false' keyed='false'>
                          <Lit value=','/>
                        </sep>
                      </Regular>
                    </arg>
                  </Field>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Super'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Ref>
                    <path many='false' keyed='false'>
                      <Sub name='classes'>
                        <key many='false' keyed='false'>
                          <It/>
                        </key>
                      </Sub>
                    </path>
                  </Ref>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Field'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Create name='Field'>
                <arg many='false' keyed='false'>
                  <Sequence>
                    <elements many='true' keyed='false'>
                      <Field name='name'>
                        <arg many='false' keyed='false'>
                          <Value kind='sym'/>
                        </arg>
                      </Field>
                      <Call>
                        <rule many='false' keyed='true'>
                          /rules[Kind]
                        </rule>
                      </Call>
                      <Field name='type'>
                        <arg many='false' keyed='false'>
                          <Ref>
                            <path many='false' keyed='false'>
                              <Sub name='types'>
                                <key many='false' keyed='false'>
                                  <It/>
                                </key>
                              </Sub>
                            </path>
                          </Ref>
                        </arg>
                      </Field>
                      <Call>
                        <rule many='false' keyed='true'>
                          /rules[Multiplicity]
                        </rule>
                      </Call>
                      <Regular optional='true'>
                        <arg many='false' keyed='false'>
                          <Call>
                            <rule many='false' keyed='true'>
                              /rules[Annot]
                            </rule>
                          </Call>
                        </arg>
                      </Regular>
                    </elements>
                  </Sequence>
                </arg>
              </Create>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Kind'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='#'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='eql?'>
                        <e1 many='false' keyed='false'>
                          <EVar name='key'/>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBoolConst val='true'/>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='##'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='&amp;'>
                        <e1 many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='key'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst val='true'/>
                            </e2>
                          </EBinOp>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='auto'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst val='true'/>
                            </e2>
                          </EBinOp>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='!'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='eql?'>
                        <e1 many='false' keyed='false'>
                          <EVar name='traversal'/>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBoolConst val='true'/>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value=':'/>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Multiplicity'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='*'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='&amp;'>
                        <e1 many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='many'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst val='true'/>
                            </e2>
                          </EBinOp>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBinOp op='eql?'>
                            <e1 many='false' keyed='false'>
                              <EVar name='optional'/>
                            </e1>
                            <e2 many='false' keyed='false'>
                              <EBoolConst val='true'/>
                            </e2>
                          </EBinOp>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='?'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='eql?'>
                        <e1 many='false' keyed='false'>
                          <EVar name='optional'/>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBoolConst val='true'/>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='+'/>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBinOp op='eql?'>
                        <e1 many='false' keyed='false'>
                          <EVar name='many'/>
                        </e1>
                        <e2 many='false' keyed='false'>
                          <EBoolConst val='true'/>
                        </e2>
                      </EBinOp>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Code>
                    <expr many='false' keyed='false'>
                      <EBoolConst val='true'/>
                    </expr>
                  </Code>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Annot'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='/'/>
                  <Field name='inverse'>
                    <arg many='false' keyed='false'>
                      <Ref>
                        <path many='false' keyed='false'>
                          <Sub name='fields'>
                            <parent many='false' keyed='false'>
                              <Sub name='type'>
                                <parent many='false' keyed='false'>
                                  <Anchor type='.'/>
                                </parent>
                              </Sub>
                            </parent>
                            <key many='false' keyed='false'>
                              <It/>
                            </key>
                          </Sub>
                        </path>
                      </Ref>
                    </arg>
                  </Field>
                </elements>
              </Sequence>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Lit value='='/>
                  <Field name='computed'>
                    <arg many='false' keyed='false'>
                      <Call>
                        <rule many='false' keyed='true'>
                          /rules[Expr]
                        </rule>
                      </Call>
                    </arg>
                  </Field>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
      <Rule name='Expr'>
        <grammar many='false' keyed='false'>
          /
        </grammar>
        <arg many='false' keyed='false'>
          <Alt>
            <alts many='true' keyed='false'>
              <Sequence>
                <elements many='true' keyed='false'>
                  <Call>
                    <rule many='false' keyed='true'>
                      /rules[ETernOp]
                    </rule>
                  </Call>
                </elements>
              </Sequence>
            </alts>
          </Alt>
        </arg>
      </Rule>
    </rules>
  </Grammar>
</schema.grammar>