primitive str 
primitive int 
primitive bool 

class Grammar 
  start: Rule 
! rules: Rule* 
 

class Expression

class Rule < Expression
# name: str 
  grammar: Grammar / rules 
  // optional because of abstract rules
! arg: Expression?
 

class Alt < Expression 
! alts: Expression+ 
 

class Sequence < Expression 
! elements: Expression* 
 

class Create < Expression 
  name: str 
! arg: Expression
 

class Field < Expression 
  name: str 
! arg: Expression 
 

class Code < Expression 
  code: str 
 

class Value < Expression 
  kind: str 
 

class Ref < Expression
  !path: Path


class Lit < Expression 
  value: str
 

class Call < Expression 
  rule: Rule 
 

class Regular < Expression 
! arg: Expression 
  optional: bool 
  many: bool 
  sep: str ? 
 

class Epsilon < Expression



// extension for parsing
class Item
  expression: Expression
  elements: Expression*
  dot: int



// extensions to path.schema

class Key 
class It < Key 
class Path 


// let bindings

class Let < Expression
  arg: Expression
  binding: Binding

  

class Var < Key
  name: str


class Binding
  target: Path
  value: Path


