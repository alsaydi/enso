primitive str 
primitive int 
primitive bool 

class Grammar 
  start: Rule 
  rules! Rule* 
 
class Rule
  name# str 
  grammar: Grammar / rules 
  arg! Pattern?   // optional because of abstract rules
 
class Pattern

class Alt < Pattern 
  alts! Pattern+ 

class Sequence < Pattern 
  elements! Pattern* 
 
class Create < Pattern 
  name: str 
  arg! Pattern
 
class Field < Pattern 
  name: str 
  arg! Pattern 
 
class Code < Pattern
  expr! Expr

class Predicate
  lhs! Expr
  rhs! Expr
 
class Value < Pattern 
  kind: str 
 
class Ref < Pattern
   path! Path

class Lit < Pattern 
  value: str
 
class Call < Pattern 
  rule: Rule 
 
class Regular < Pattern 
  arg! Pattern 
  optional: bool 
  many: bool 
  sep! Pattern ? 

class NoSpace < Pattern
class Break < Pattern
 
class Epsilon < Pattern

// extensions to path.schema

class Key 
class It < Key 
class Path 

// let bindings

class Let < Pattern
  arg: Pattern
  binding: Binding

class Var < Key
  name: str

class Binding
  target: Path
  value: Path

class Expr
