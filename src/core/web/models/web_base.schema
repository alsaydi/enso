
primitive str
primitive int
primitive bool

class Web
! toplevels: Toplevel*


class Toplevel



class Abstraction
! formals: Formal*
! tail: Tail?


class Def < Toplevel, Abstraction
# name: str
! body: Stat


class Import < Toplevel
# module: str


class Stat


class Do < Stat
! call: Expr
! cond: Expr?



class For < Stat
  var: str
! iter: Expr
! body: Stat
  index: str?


class If < Stat
! cond: Expr
! body: Stat
! else: Stat?


class Switch < Stat
! exp: Expr
! cases: Case*
! default: Stat?


class Case
  name: str
! body: Stat



class Let < Stat
! decls:Assign*
! body:Stat


class Call < Stat, Expr
! exp: Expr
! args: Expr*
! block: Stat?


class Assign
  name: str
! exp: Expr


class Block < Stat
! stats: Stat*


class Text < Stat
  value: str


class Output < Stat
! exp: Expr


class Formal 
  name: str
! cons: Cons?


class Cons < Abstraction
 name: str


class Tail < Abstraction
  name: str

class Expr

class Str < Expr
! value: str


class Int < Expr
  value: int


class Var < Expr
  name: str


class All < Expr
  klass: str


class Field < Expr
! exp: Expr
  name: str


class Subscript < Expr
! obj: Expr
! exp: Expr


class Address < Expr
! exp: Expr


class Concat < Expr
! lhs: Expr
! rhs: Expr


class Equal < Expr
! lhs: Expr
! rhs: Expr


class In < Expr
! lhs: Expr
! rhs: Expr


class List < Expr
! elements: Expr*


class New < Expr
  \class: str

