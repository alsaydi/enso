start Web

Web ::= [Web] toplevels:Toplevel*

Toplevel ::= [Def] "def" name:sym Sig? body:Stat
	  |  [Import] "import" module:sym

// TODO: we have a dangling else problem...

Stat ::= [For] "for" "(" var:sym ":" iter:Expr Index? ")" body:Stat
       | [If] "if" "(" cond:Expr ")" body:Stat ("else" else1:Stat)?
       | [Call] exp:Primary Args? block:Block
       | Call ";"  // todo: should be exp if we have closures
       | Block
       | [Let] "let" decls:Assign* "in" body:Stat
       | [Output] "$" exp:Expr
       | [Text] value:str
       | [Switch] "switch" "(" exp:Expr ")" "{" cases:Case*
       	 	  	   ("default" default:Stat)? "}"
       | [Do] "do" call:Expr ";"
       | [Do] "doif" cond:Expr call:Expr ";"

Block ::= [Block] "{" stats:Stat* "}"

Call ::= [Call] exp:Primary Args

Case ::= [Case] "case" name:sym ":" body:Stat



Primary ::= [Subscript] obj:Primary "[" exp:Expr "]"


Expr ::= Primary
      | Call  
      | [New] "new" "(" class:sym ")"
      | [Address] "address" "(" exp:Expr ")"
      | [Concat] lhs:Expr "+" rhs:Expr  // TODO: precedences
      | [Equal] lhs:Expr "==" rhs:Expr 
      | [In] lhs:Expr "in" rhs:Expr 
      | [List] "[" elements:{Expr ","}* "]"

      
Index ::= "," index:sym

Assign ::= [Assign] name:sym "=" exp:Expr

Args ::= "(" args:{Expr ","}* ")"

Sig ::=  "(" Formals  ")"

Formals ::= formals:{Formal ","}+ "," tail:Tail
         |  formals:{Formal ","}* 
         |  tail:Tail

Tail ::= [Tail] name:sym "[" Formals "]"

// TODO: only allow Cons in tail positions
// we cannot have tail args and cons args at 
// the same time
//    |  [Cons] name:sym ":" cons:sym Sig
Formal ::= [Formal] name:sym (":" cons:Cons)?

Cons ::= [Cons] name:sym Sig

