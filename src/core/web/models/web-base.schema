
primitive str
primitive int
primitive bool

class Web
! toplevels: Toplevel*


class Toplevel



class Abstraction
! formals: Formal*
! tail: Tail?


class Def < Toplevel, Abstraction
# name: str
! body: Stat


class Import < Toplevel
# module: str


class Stat


class Do < Stat
! call: Exp
! cond: Exp?



class For < Stat
  var: str
! iter: Exp
! body: Stat
  index: str?


class If < Stat
! cond: Exp
! body: Stat
! else: Stat?


class Switch < Stat
! exp: Exp
! cases: Case*
! default: Stat?


class Case
  name: str
! body: Stat



class Let < Stat
! decls:Assign*
! body:Stat


class Call < Stat, Exp
! exp: Exp
! args: Exp*
! block: Stat?


class Assign
  name: str
! exp: Exp


class Block < Stat
! stats: Stat*


class Text < Stat
  value: str


class Output < Stat
! exp: Exp


class Formal 
  name: str
! cons: Cons?


class Cons < Abstraction
 name: str


class Tail < Abstraction
  name: str


class Exp 

class Str < Exp
! value: str


class Int < Exp
  value: int


class Var < Exp
  name: str


class All < Exp
  klass: str


class Field < Exp
! exp: Exp
  name: str


class Subscript < Exp
! obj: Exp
! exp: Exp


class Address < Exp
! exp: Exp


class Concat < Exp
! lhs: Exp
! rhs: Exp


class Equal < Exp
! lhs: Exp
! rhs: Exp


class In < Exp
! lhs: Exp
! rhs: Exp


class List < Exp
! elements: Exp*


class New < Exp
  \class: str

