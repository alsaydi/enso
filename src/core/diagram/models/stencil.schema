
class Stencil
  root: str
! body: Part
end

class Part 
! props: Assign*
end

// TEMPLATE STUFF

class Alt < Part 
! alts: Part+
end 

class For < Part
  var: str
  label: str?
! iter: Expression
! body: Part
  index: str?
end

class Test < Part
! condition: Expression
! body: Part
end

class Label < Part
! label: Expression
! body:  Part
end

class Let < Part
! decls: Assign* 
! body:  Part
end

class Require < Part
  path: str
! content: Part?
end

class Assign
! loc: Expression
! exp: Expression
end

class Expression end

class Literal < Expression
  value: atom?
end

class Prim < Expression
  op: str
! args: Expression*
end

class InstanceOf < Expression
! base: Expression
  class_name: str
end

class Field < Expression
! base: Expression
  field: str
end

class FunApp < Expression
  fun:str
! args:Expression*
end

class Var < Expression
  name: str
end

class Color < Expression
  r: Expression
  g: Expression
  b: Expression
end

// DIAGRAMS

class Container < Part
  direction: int // 1=vert, 2=hoiz, 3=graph
! items: Part*
end

class Text < Part
! string: Expression
end

class Shape < Part
  kind: str
! content: Part?
end

class Connector < Part
! label: Expression?
  ends: ConnectorEnd*
end

class ConnectorEnd
  arrow: str?
! label: Expression?
! other_label: Expression?
! part: Expression
end

 
primitive int
primitive str
primitive bool
primitive atom
