import impl.grammar

start Stencil

abstract Expr
abstract Command
abstract EAssign

// To make text fields editable, add a "+" behind the name

// diagrams
Stencil ::= [Stencil] "diagram" (title:str)? "(" root:sym ")" body:Part*

Part ::= [Container] Dir Props? "{" items:Part+ "}"
       | [Connector] "connector" Props? "(" ends:ConnectorEnd1 "--" ends:ConnectorEnd2 ")"
       | [Text] "text" ("+" {editable==true} | {editable==false}) Props? string:Expr
       | [Shape] (kind:"box" | kind:"oval" | kind:"rounded") Props? content:Part?
       | [CheckBox] "checkbox" string:Expr
       | [RadioList] "radio" value:Expr choices:Expr
       | [TextBox] "text?" value:Expr
       | Command

Dir ::= "vertical" {direction==1} | "horizontal" {direction==2} | "graph"  {direction==3} | "do"  {direction==4}
ConnectorEnd1 ::= [ConnectorEnd] (label:Expr ("," other_label:Expr)? ":")? part:Expr (arrow:"<" | arrow:"*")?
ConnectorEnd2 ::= [ConnectorEnd] (arrow:">" | arrow:"*")?  part:Expr (":" label:Expr ("," other_label:Expr)?)?
Index ::= "," index:sym

Props ::= "[" props:EAssign* @"," "]"

// Extra expressions

EBinOp1 ::= [InstanceOf] base:Expr "is" class_name:sym
          | EBinOp1

EUnOp ::= [Color] "(" r:Expr "," g:Expr "," b:Expr ")"
         | [Eval] "[[" expr:Expr "]]"
         | EUnOp
