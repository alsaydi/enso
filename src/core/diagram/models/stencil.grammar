start Stencil

// diagrams
Stencil ::= [Stencil] "diagram" "(" root:sym ")" body:Part

Part ::= [Alt] alts:{Part "|"}+
      | [For] "for" Props?  "(" var:sym ":" iter:Exp Index? ")" body:Part
      | [Test] "if" condition:Exp body:Part
      | [Let] "let" decls:Assign* "in" body:Part
      | [Label] "label" Props? label:Loc body:Part

      | [Container] Dir Props? "{" items:Part* "}"
      | [Connector] "connector" Props? "(" ends:ConnectorEnd1 "--" ends:ConnectorEnd2 ")"
      | [Text] "text" Props? string:Exp
      | [Shape] (kind:"box" | kind:"oval" | kind:"rounded") Props? "{" content:Part? "}"

Dir ::= "vertical" @"@direction=1" | "horizontal"  @"@direction=2" | "graph"  @"@direction=3" | "do"  @"@direction=4"
ConnectorEnd1 ::= [ConnectorEnd] (label:Exp ("," other_label:Exp)? ":")? part:Loc (arrow:"<" | arrow:"*")? 
ConnectorEnd2 ::= [ConnectorEnd] (arrow:">" | arrow:"*")?  part:Loc (":" label:Exp ("," other_label:Exp)?)? 
Index ::= "," index:sym

Props ::= "[" props:{ Assign ","}* "]"
Assign ::= [Assign] loc:Loc "=" exp:Exp

Exp ::= [Prim] args:Exp1 op:"?" args:Exp1 ":" args:Exp
      | Exp1

Exp1 ::= [Prim] args:Exp2 op:"&" args:Exp1
      | Exp2

Exp2 ::= [Prim] args:Exp3 op:"|" args:Exp2
      | Exp3

Exp3 ::= [Prim] args:Exp4 (op:"==" | op:"!=" | op:"<" | op:">" | op:"<=" | op:">=") args:Exp4
      | [InstanceOf] base:Exp4 "is" class_name:sym
      | Exp4

Exp4 ::= Loc
      | [Prim] op:"!" args:Exp4
      | "(" Exp ")"

Loc ::= [Field] base:Loc "@" field:sym
      | [Prim] args:Loc "[" args:Loc "]" @"@op='[]'"
      | [Color] "(" r:int "," g:int "," b:int ")"
      | [Literal] "nil" @"@value=nil"
      | [Var] name:sym
      | [Literal] value:(str | int)
      
      