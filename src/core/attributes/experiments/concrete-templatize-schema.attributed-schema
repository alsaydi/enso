

class Schema
  // untyped, so only expressions (can use type inference)
  @temp = self[types: primitives + { t.temp, t.stat | t <- classes }
end


class Class
  @temp: Class = `class $sym(name) < $ref(iter), $ref(alt), $ref(opt)
                    $Field*{ defined_fields.temp }
                  end`

  @iter: Class = `class $sym(name + "_Iter") < ITER
                    body: $ref(iter)+
                  end`
         
  @alt: Class = `class $sym(name + "_Alt") < $ref(temp), $ref(iter)
                    then: $ref(alt)+
                    else: $ref(alt)+
                  end`

  @opt: Class = `class $sym(name + "_Opt") < $ref(iter)
                    then: $ref(opt)
                  end`
  
  @stat = { iter, alt, opt, def }

end

class Field
  @temp = if type.Primitive? then
            self[type: EXP]
  	  elsif !many && !optional then
            self[type: type.temp]
          elsif !many && optional
            self[type: type.opt]
          else
            self[type: type.iter]
          end
end  