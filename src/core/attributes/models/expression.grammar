

start Schema

abstract Schema

Expression ::= [Variable] name:sym
            | [Comprehension] "[" results:{Expression ","}+ "|" conditions:Condition+ "]"
	      		      @"@ordered = true"
	    | [Comprehension] "{" results:{Expression ","}+ "|" conditions:Condition+ "}"
	    | [Comprehension] "(" results:{Expression ","}+ "|" conditions:Condition+ ")" @"@first = true"
	    | [Collection] "{" elements:{Expression ","}* "}"
	    | [Collection] "[" elements:{Expression ","}* "]" @"@ordered = true"
	    | [Lookup] obj:Expression "[" key:Expression "]"
	    | [IfThen] "if" cond:Expression "then" body:Expression
	      	       elsifs:ElsIf* "else" else:Expression "end"
            | [Call] name:sym "(" args:{Expression ","}* ")"
            | [Cons] type:sym  "{" contents:{Assign ";"}* "}"
	    | [Dot]  obj:Expression "->" field:sym
	    | [Int] value:int
	    | [Str] value:str
            | [Bool] Bool

Bool ::= [Bool] "true" @"value = true"
      |  [Bool] "false" @"value = false"

Assign ::= [Assign] name:sym ":" expressions:{Expression ","}*

ElsIf ::= [IfThen] "elsif" cond:Expression "then" body:Expression

Condition ::= Expression
           |  [Generator] var:sym "<-" expression:Expression
