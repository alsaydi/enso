
primitive str
primitive bool
primitive int

class Expression < Condition
end

class Variable < Expression
  name: str
end

class Access < Expression
! obj: Expression
end

class Dot < Access
  field: str
  args: Expression*
end

class Cons < Expression
  type: str
! contents: Assign*
end

class Assign
  name: str
! expressions: Expression*
end

class Value < Expression
end

class Int < Value
  value: int
end

class Str < Value
  value: str
end

class Bool < Value
  value: bool
end

class Not < Expression
  arg: Expression
end

class Operator < Expression
  op: str
end


class Unary < Operator
! arg: Expression
end

class Binary < Operator
! lhs: Expression
! rhs: Expression
end

class Cond < Expression
! conds: Expression+
! body: Expression+
end

class For < Cond
end

class IfThen < Cond
! elsifs: ElsIf*
! else: Else?
end

class ElsIf < Cond
end

class Else 
! body: Expression+
end

class Call < Expression
  name: str
! args: Expression*
end

class Splat < Expression
! arg: Expression
end

class Lookup < Access
! key: Expression
end

class Content
end

class Update < Expression
! obj: Expression
! contents: Content+
end

class Condition
end

class Generator < Condition
  var: str
! expression: Expression
end

class Let < Expression
! bindings: Binding+
! body: Expression+
end

class Binding
  name: str
  many: bool
! expression: Expression
end