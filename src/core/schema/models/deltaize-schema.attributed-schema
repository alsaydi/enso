

class Schema
  @delta = self[
     types: types + { *t.delta, *t.ops, *t.many_ops | t <- types }
     	    + { *p.many_ref, *p.ref_ops | p <-primitives }]
end

class Type
  @d_name = "Delta_" + name  
  @op_names = {"Insert", "Delete", "Modify"}
  @ops = { Klass {name: n + "_" + name; supers: [delta]} | n <- op_names }
  @many_ops = { Klass {name: "Many_" + n + "_" + name, supers: [delta, key];
	           Field {name: "pos"; type: pos_key }} | n <- op_names }
  @key = is_keyed? ? KEYED : MANY
  @pos_key = is_keyed? ? self.key.type : Primitive {name: "int"}
  @primitive = false
end

class Primitive
  @delta = Klass {name: d_name; fields: Field {name: val, type: self}}
  @many_ref = Klass {name: "DeltaRef_" + name; supers: [DELTAREF, KEYED];
  	      	    fields: Field {name: pos; type: self} }
  @ref_ops = {Klass {name: n + "Ref_" + name, supers: [many_ref]} | n <- op_names }
  @primitive = true
end


class Klass
  @delta = Klass { name: d_name; supers: { s.delta | s <- supers };
           defined_fields: { f.delta | f <- defined_fields } }
  @key = ( f | f <- fields, f.key, f.primitive )
end

class Field
  @delta = if traversal then
             self[type: type.delta]
           else
             self[type: ref, traversal: true]
           end
end  