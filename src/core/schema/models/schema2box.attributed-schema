

class Schema
  @D = Graph { nodes: { c.C | c <- classes }; edges: { *c.E  | c <- classes } }
end

class Klass
  @C = Box { arg: Vert { elts: [ f.F | f <- fields ] } }
  @E = { f.E | f <- fields }
end


// upon hitting a cycle the attribut evaluator should
// produce a reference value to the thing in the memo table
// the result will be an Instance, which can be instantiated.
class Field
  @F = Horiz { elts: Text {value: name}, Text {value: ":"}, Text {value: type.name} }
  @E = Conn { from: owner.C; to: type.C }
end