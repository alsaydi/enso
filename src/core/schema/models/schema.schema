  primitive \str
  primitive \int
  primitive \bool
  primitive \real

  class Schema
    types: Type*
    classes: Klass* = "@types.select(&:Klass?)"
    primitives: Primitive* = "@types.select(&:Primitive?)"
  end

  class Type
    #name: str
    #\schema: Schema / Schema.types
  end

  class Primitive < Type
  end
  
  class Klass < Type
    supers: Klass*
    subtypes: Klass* / Klass.supers
    defined_fields: Field*
    fields: Field* = "@all_fields.select {|f| !f.computed}"
    all_fields: Field* = "@supers.flat_map(&:all_fields) + @defined_fields"
  end
  
  class Field
    #name: str
    #owner: Klass / Klass.defined_fields
    type: Type
    optional: bool
    many: bool
    key: bool
    inverse: Field? / Field.inverse 
    computed: str?
    traversal: bool
  end
