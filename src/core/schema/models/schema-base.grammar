start Schema

Schema ::= [Schema] types:TypeDef* 

TypeDef ::= Primitive | Class

Primitive ::= [Primitive] "primitive" name:sym

Class ::= [Class] "class" name:sym ClassAnnot defined_fields:Field* 
ClassAnnot ::= Parent?
Parent ::= "<" supers:Super+ @","
Super ::= </classes[it]>

Field ::= [Field] name:sym Kind type:</types[it]> Multiplicity Annot?

Kind ::= "#" { key == true }
      |  "##" { key == true && auto == true }
      |  "!" { traversal == true }
      |  ":"

Multiplicity ::= "*" { many == true && optional == true }
	       | "?" { optional == true } 
	       | "+" { many == true }
	       | { }

Annot ::= "/" inverse:<./type/fields[it]>
        | "=" computed:Expr

abstract Expr
