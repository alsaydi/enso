start Schema

Schema ::= [Schema] types:TypeDef* 

TypeDef ::= Primitive | Class

Primitive ::= [Primitive] "primitive" name:sym

Class ::= [Class] "class" name:sym ClassAnnot defined_fields:Field* 
ClassAnnot ::= Parent?
Parent ::= "<" supers:Super+@","
Super ::= </classes[it]>

Field ::= [Field] Key? Traversal? name:sym ":" type:</types[it]> Multiplicity Annot?
Key ::= "#" { key = true }
     |  "##" { key = true auto = true }

Traversal ::= "!" { traversal = true }

Multiplicity ::= "*" { many = true optional = true }
	       | "?" { optional = true } 
	       | "+" { many = true }
	       | { }

Annot ::= "/" inverse:<./type/fields[it]>
        | "=" computed:Expr

abstract Expr
