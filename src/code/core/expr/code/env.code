

module Env
  module BaseEnv

    def set_in_place(key, &block)
      self[key] = block.call(self[key]);
    end

    def set(key, &block)
      local :res
      res = self.clone;
      res.set_in_place(key, block);
      res;
    end

    def set_parent(env)
      @parent = env;
      self;
    end

    def set_grandparent(env)
      if @parent == nil || @parent == {} then
        self.set_parent(env);
      else
        @parent.set_grandparent(env);
      end
    end

    def add(env)
      self.set_parent(env);
      self;
    end

    def to_s
      local :r
      r = [];
      self.each do |k, v|
        r.push(S(k, "=>", v));
      end
      S("{ ", r.join(", "), " }");
    end

    def clone
      self;
    end
  end

  class HashEnv
    include BaseEnv

    def initialize(hash = {})
      @hash = hash;
    end

    def [](key)
      if @hash.has_key_P(key) then
        @hash[key];
      else
        @parent && @parent[key];
      end
    end

    def []=(key, value)
      if @parent && @parent.has_key_P(key) then
        @parent[key] = value;
      else
        @hash[key] = value;
      end
    end

    def has_key_P(key)
      @hash.has_key_P(key) || @parent && @parent.has_key_P(key);
    end

    def to_s
      @hash.to_s;
    end

    def clone
      local :r
      r = HashEnv.new(@hash.clone);
      r.set_parent(@parent);
      r;
    end
  end

  class ObjEnv
    include BaseEnv

    attr_reader :obj

    def initialize(obj, parent = nil)
      @obj = obj;
      @parent = parent;
    end

    def [](key)
      if key == "self" then
        @obj;
      elsif (
        @obj.schema_class.all_fields.any_P do |f|
          f.name == key;
        end
      ) then
        @obj[key];
      else
        @parent && @parent[key];
      end
    end

    def []=(key, value)
      @obj[key] = value;
    end

    def has_key_P(key)
      @obj.schema_class.all_fields[key] || @parent && @parent.has_key_P(key);
    end

    def to_s
      @obj.to_s;
    end

    def type(fname)
      @obj.schema_class.all_fields[fname].type;
    end

    def clone
      self;
    end
  end

  class LambdaEnv
    include BaseEnv

    def initialize(label, &block)
      @label = label;
      @block = block;
    end

    def [](key)
      local :res
      if @label == key then
        res = @block.call;
        res;
      else
        @parent && @parent[key];
      end
    end

    def []=(key, value)
      if @label == key then
        self.raise(S("Trying to modify read-only variable ", key));
      else
        @parent[key] = value;
      end
    end

    def has_key_P(key)
      @label == key || @parent && @parent.has_key_P(key);
    end

    def to_s
      @block.to_s;
    end

    def clone
      self;
    end
  end
end
