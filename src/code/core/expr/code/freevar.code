require "core/expr/code/eval" # Eval

module FreeVar
  module FreeVarExpr
    include Eval. EvalExpr
    include Lvalue. LValueExpr
    include Interpreter. Dispatcher

    def depends(obj)
      self.dispatch("depends", obj);
    end

    def depends_EField(e, fname)
      [];
    end

    def depends_EVar(name)
      if @D["bound"].include_P(name) || name == "self" then
        [];
      else
        [Lvalue.Address.new(@D["env"], name)];
      end
    end

    def depends_ELambda(body, formals)
      local :bound2
      bound2 = @D["bound"].clone;
      formals.each do |f|
        bound2.push(self.depends(f));
      end
      self.dynamic_bind({}) do
        self.depends(body);
      end
    end

    def depends_Formal(name)
      name;
    end

    def depends__P(type, fields, args)
      local :res
      res = [];
      type.fields.each do |f|
        if (f.traversal && ! f.type.Primitive_P) && fields[f.name] then
          if ! f.many then
            res = res + self.depends(fields[f.name]);
          else
            fields[f.name].each do |o|
              res = res + self.depends(o);
            end
          end
        end
      end
      res;
    end
  end

  class FreeVarExprC
    include FreeVarExpr

    def initialize
    end
  end
end
