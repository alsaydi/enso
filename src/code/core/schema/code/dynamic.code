require "enso" # Enso

module ManagedData
  class DynamicUpdateProxy < EnsoProxyObject

    def initialize(obj)
      @obj = obj;
      @fields = {};
    end

    def _get(name)
      local :var_V , :field , :val
      var_V = @fields[name];
      if var_V then
        var_V;
      elsif ! name.is_a_P(Variable) && name.start_with_P("_") then
        @obj.send(name.to_sym);
      else
        field = @obj.schema_class.all_fields[name];
        if field.many then
          @obj[name];
        else
          val = @obj[name];
          if val.is_a_P(ManagedData.MObject) then
            val = val.dynamic_update;
          end
          @fields[name] = var_V = Variable.new(S(@obj, ".", name), val);
          @obj.add_listener(name) do |val|
            var_V.value = val;
          end
          var_V;
        end
      end
    end

    def _set(name, val)
      @obj[name] = self.args[0];
    end

    def to_s
      S("[", @obj.to_s, "]");
    end

    def dynamic_update
      self;
    end

    def schema_class
      @obj.schema_class;
    end
  end
end
